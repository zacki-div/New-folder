// Script de test pour le syst√®me d'authentification
// Utilise uniquement les modules Node.js natifs pour √©viter les probl√®mes de d√©pendances

const http = require('http');
const https = require('https');

// Configuration
const API_BASE = 'http://localhost:5000/api';

// Fonction utilitaire pour faire des requ√™tes HTTP
function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const urlObj = new URL(url);
    const isHttps = urlObj.protocol === 'https:';
    const httpModule = isHttps ? https : http;
    
    const requestOptions = {
      hostname: urlObj.hostname,
      port: urlObj.port || (isHttps ? 443 : 80),
      path: urlObj.pathname + urlObj.search,
      method: options.method || 'GET',
      headers: {
        'Content-Type': 'application/json',
        ...options.headers
      }
    };

    const req = httpModule.request(requestOptions, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        try {
          const parsedData = JSON.parse(data);
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: parsedData
          });
        } catch (error) {
          resolve({
            statusCode: res.statusCode,
            headers: res.headers,
            data: data
          });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (options.body) {
      req.write(JSON.stringify(options.body));
    }

    req.end();
  });
}

// Tests
async function runTests() {
  console.log('üß™ D√©marrage des tests d\'authentification...\n');

  try {
    // Test 1: Health Check
    console.log('1Ô∏è‚É£  Test Health Check...');
    const healthResponse = await makeRequest(`${API_BASE}/health`);
    console.log(`   Status: ${healthResponse.statusCode}`);
    console.log(`   Response: ${JSON.stringify(healthResponse.data, null, 2)}\n`);

    // Test 2: Inscription
    console.log('2Ô∏è‚É£  Test Inscription...');
    const registerData = {
      firstName: 'Test',
      lastName: 'User',
      email: `test${Date.now()}@example.com`,
      password: 'TestPassword123!',
      phone: '0612345678'
    };

    const registerResponse = await makeRequest(`${API_BASE}/auth/register`, {
      method: 'POST',
      body: registerData
    });
    
    console.log(`   Status: ${registerResponse.statusCode}`);
    if (registerResponse.statusCode === 201) {
      console.log('   ‚úÖ Inscription r√©ussie');
      console.log(`   Token re√ßu: ${registerResponse.data.token ? 'Oui' : 'Non'}`);
    } else {
      console.log('   ‚ùå √âchec de l\'inscription');
      console.log(`   Erreur: ${JSON.stringify(registerResponse.data, null, 2)}`);
    }
    console.log();

    // Test 3: Connexion
    console.log('3Ô∏è‚É£  Test Connexion...');
    const loginResponse = await makeRequest(`${API_BASE}/auth/login`, {
      method: 'POST',
      body: {
        email: registerData.email,
        password: registerData.password
      }
    });

    console.log(`   Status: ${loginResponse.statusCode}`);
    let authToken = null;
    
    if (loginResponse.statusCode === 200) {
      console.log('   ‚úÖ Connexion r√©ussie');
      authToken = loginResponse.data.token;
      console.log(`   Token re√ßu: ${authToken ? 'Oui' : 'Non'}`);
    } else {
      console.log('   ‚ùå √âchec de la connexion');
      console.log(`   Erreur: ${JSON.stringify(loginResponse.data, null, 2)}`);
    }
    console.log();

    // Test 4: Acc√®s au profil (route prot√©g√©e)
    if (authToken) {
      console.log('4Ô∏è‚É£  Test Acc√®s Profil (Route Prot√©g√©e)...');
      const profileResponse = await makeRequest(`${API_BASE}/auth/me`, {
        method: 'GET',
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });

      console.log(`   Status: ${profileResponse.statusCode}`);
      if (profileResponse.statusCode === 200) {
        console.log('   ‚úÖ Acc√®s au profil r√©ussi');
        console.log(`   Utilisateur: ${profileResponse.data.user.firstName} ${profileResponse.data.user.lastName}`);
      } else {
        console.log('   ‚ùå √âchec de l\'acc√®s au profil');
        console.log(`   Erreur: ${JSON.stringify(profileResponse.data, null, 2)}`);
      }
      console.log();

      // Test 5: Mise √† jour du profil
      console.log('5Ô∏è‚É£  Test Mise √† jour Profil...');
      const updateResponse = await makeRequest(`${API_BASE}/auth/profile`, {
        method: 'PUT',
        headers: {
          'Authorization': `Bearer ${authToken}`
        },
        body: {
          bio: 'Bio mise √† jour par le test automatique',
          address: '123 Rue de Test, 75001 Paris'
        }
      });

      console.log(`   Status: ${updateResponse.statusCode}`);
      if (updateResponse.statusCode === 200) {
        console.log('   ‚úÖ Mise √† jour du profil r√©ussie');
      } else {
        console.log('   ‚ùå √âchec de la mise √† jour du profil');
        console.log(`   Erreur: ${JSON.stringify(updateResponse.data, null, 2)}`);
      }
      console.log();

      // Test 6: D√©connexion
      console.log('6Ô∏è‚É£  Test D√©connexion...');
      const logoutResponse = await makeRequest(`${API_BASE}/auth/logout`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${authToken}`
        }
      });

      console.log(`   Status: ${logoutResponse.statusCode}`);
      if (logoutResponse.statusCode === 200) {
        console.log('   ‚úÖ D√©connexion r√©ussie');
      } else {
        console.log('   ‚ùå √âchec de la d√©connexion');
        console.log(`   Erreur: ${JSON.stringify(logoutResponse.data, null, 2)}`);
      }
      console.log();
    }

    // Test 7: Tentative d'acc√®s sans token
    console.log('7Ô∏è‚É£  Test Acc√®s Sans Token (S√©curit√©)...');
    const unauthorizedResponse = await makeRequest(`${API_BASE}/auth/me`, {
      method: 'GET'
    });

    console.log(`   Status: ${unauthorizedResponse.statusCode}`);
    if (unauthorizedResponse.statusCode === 401) {
      console.log('   ‚úÖ Acc√®s correctement refus√©');
    } else {
      console.log('   ‚ùå Probl√®me de s√©curit√© d√©tect√©');
    }
    console.log();

    console.log('üéâ Tests termin√©s!');

  } catch (error) {
    console.error('‚ùå Erreur lors des tests:', error.message);
    
    if (error.code === 'ECONNREFUSED') {
      console.log('\nüí° Suggestions:');
      console.log('   - V√©rifiez que le serveur backend est d√©marr√©');
      console.log('   - V√©rifiez que MongoDB est en cours d\'ex√©cution');
      console.log('   - V√©rifiez que le port 5000 est disponible');
    }
  }
}

// V√©rification de la disponibilit√© du serveur
async function checkServerAvailability() {
  try {
    console.log('üîç V√©rification de la disponibilit√© du serveur...');
    await makeRequest(`${API_BASE}/health`);
    console.log('‚úÖ Serveur disponible\n');
    return true;
  } catch (error) {
    console.log('‚ùå Serveur non disponible');
    console.log('üí° Assurez-vous que le serveur backend est d√©marr√© sur le port 5000\n');
    return false;
  }
}

// Point d'entr√©e
async function main() {
  console.log('üöÄ Test du Syst√®me d\'Authentification');
  console.log('=====================================\n');
  
  const serverAvailable = await checkServerAvailability();
  
  if (serverAvailable) {
    await runTests();
  } else {
    console.log('‚ö†Ô∏è  Impossible d\'ex√©cuter les tests sans serveur backend');
    console.log('\nPour d√©marrer le serveur:');
    console.log('1. cd back-end');
    console.log('2. npm install');
    console.log('3. npm run dev');
  }
}

// Ex√©cuter les tests
main().catch(console.error);
